'\" e  @(#)cutest_csetup v1.0 12/2012;
.TH cutest_csetup 3M "4 Dec 2012" "CUTEst user documentation" "CUTEst user documentation"
.SH NAME
CUTEST_csetup \- CUTEst tool to set up the data structures for constrained
minimization.
.SH SYNOPSIS
.HP 1i
CALL CUTEST_csetup( status, input, out, io_buffer, 
n, m, X, X_l, X_u, Y, C_l, C_u, 
EQUATN, LINEAR, efirst, lfirst, nvfrst )
.SH DESCRIPTION
The CUTEST_csetup subroutine sets up the correct data structures for
subsequent computations on the problem decoded from a SIF file by
the script \fIsifdecode\fP. The problem under consideration
is to minimize or maximize an objective function
.EQ
f(x)
.EN
over all
.EQ
x
.EN
\(mo
.EQ
R sup n
.EN
subject to
general equations
.EQ
c sub i (x) ~=~ 0,
.EN
.EQ
~(i
.EN
\(mo
.EQ
{ 1 ,..., m sub E } ),
.EN
general inequalities
.EQ
c sub i sup l (x) ~<=~ c sub i (x) ~<=~ c sub i sup u (x),
.EN
.EQ
~(i
.EN
\(mo
.EQ
{ m sub E + 1 ,..., m }),
.EN
and simple bounds
.EQ
x sup l ~<=~ x ~<=~ x sup u.
.EN
The objective function is group-partially separable and 
all constraint functions are partially separable.

.LP 
.SH ARGUMENTS
The arguments of CUTEST_csetup are as follows
.TP 5
.B status \fP[out] - integer
the outputr status: 0 for a succesful call, 1 for an array 
allocation/deallocation error, 2 for an array bound error,
3 for an evaluation error,
.TP
.B input \fP[in] - integer
the unit number for the decoded data; the unit from which OUTSDIF.d is
read,
.TP
.B out \fP[in] - integer
the unit number for any error messages,
.TP
.B io_buffer \fP[in] - integer
the unit number for any internal input/output,
.TP
.B n \fP[out] - integer
the number of variables for the problem,
.TP
.B m \fP[out] - integer
the total number of general constraints,
.TP
.B X \fP[out] - real/double precision
an array that gives the initial estimate of the solution of the
problem,
.TP
.B X_l \fP[out] - real/double precision
an array that gives lower bounds on the variables,
.TP
.B  X_u \fP[out] - real/double precision
an array that gives upper bounds on the variables,
.TP
.B Y \fP[out] - real/double precision
an array that gives the initial estimate of the Lagrange multipliers
at the solution of the problem. By convention, the signs of the
Lagrange multipliers Y are set so the Lagrangian function can be
written as
.EQ
l(x,y) = f(x) + y sup T c(x),
.EN
.TP
.B C_l \fP[out] - real/double precision
an array that gives lower bounds on the inequality constraints,
.TP
.B C_u \fP[out] - real/double precision
an array that gives upper bounds on the inequality constraints,
.TP
.B EQUATN \fP[out] - logical
a logical array whose i-th component is .TRUE. if the i-th constraint
is an equation (i in E) and .FALSE. if the constraint is an inequality
(i in I),
.TP
.B LINEAR \fP[out] - logical
a logical array whose i-th component is .TRUE. if the i-th constraint
is linear or affine and .FALSE. otherwise,
.TP
.B efirst \fP[in] - logical
 logical variable that should be set .TRUE. if the user wishes the
general equations to occur before the general inequalities in the list
of constraints. If the order is unimportant, efirst should be set to .FALSE.,
.TP
.B lfirst \fP[in] - logical
a logical variable that should be set .TRUE. if the user wishes the
general linear (or affine) constraints to occur before the general
nonlinear ones in the list of constraints. If the order is
unimportant, lfirst should be set .FALSE. If both efirst and lfirst
are set .TRUE., the linear constraints will occur before the nonlinear
ones. The linear  constraints will be ordered so that the linear
equations occur before the linear inequalities. Likewise, the
nonlinear equations will appear before the nonlinear inequalities in
the list of nonlinear constraints,
.TP
.B nvfrst \fP[in] - logical
a logical variable that should be set .TRUE. if the user wishes that
the nonlinear variables come first. Within the nonlinear variables the
smaller set of either the nonlinear objective or nonlinear Jacobian
variables appears first.
.LP
.SH APPLICATION USAGE
A call to CUTEST_csetup must precede calls to other evaluation tools,
except CUTEST_cdimen, for generally-constrained problems.
.SH AUTHORS
I. Bongartz, A.R. Conn, N.I.M. Gould, D. Orban and Ph.L. Toint
.SH "SEE ALSO"
\fICUTEr (and SifDec): A Constrained and Unconstrained Testing
Environment, revisited\fP,
   N.I.M. Gould, D. Orban and Ph.L. Toint,
   ACM TOMS, \fB29\fP:4, pp.373-394, 2003.

\fICUTE: Constrained and Unconstrained Testing Environment\fP,
I. Bongartz, A.R. Conn, N.I.M. Gould and Ph.L. Toint, 
TOMS, \fB21\fP:1, pp.123-160, 1995.

cutest_usetup(3M), sifdecode(1).
